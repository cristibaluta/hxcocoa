//
//  Array
//  PiratePig
//
//  Code generated by Haxe Objective-C target
//

#import "Array.h"

@implementation NSMutableArray ( Array )

- (id)hx_objectAtIndex:(NSInteger)index {
	
	if (index >= [self count]) while ([self count] <= index) [self addObject:[NSNull null]];
	id obj = [self objectAtIndex:index];
	if ([obj isKindOfClass:[NSNull class]]) obj = nil;
	return obj;
}
- (void)hx_replaceObjectAtIndex:(NSInteger)index withObject:(id)withObject {
	
	if (index >= [self count]) while ([self count] <= index) [self addObject:[NSNull null]];
	[self replaceObjectAtIndex:index withObject:(withObject==nil?[NSNull null]:withObject)];
}
- (NSMutableArray<id>*)filter:(id)f {
	
	return nil;
}
- (NSMutableArray<id>*)map:(id)f {
	
	return nil;
}
- (id)iterator {
	
	
	HxIterator *it = [[HxIterator alloc] init];
	it.arr = self;
	it.len = self.length;
	return it;
}
- (NSMutableArray<id>*)splice:(NSInteger)pos len:(NSInteger)len {
	
	NSArray *newArray = [self subarrayWithRange:NSMakeRange(pos, len)];
	[self removeObjectsInArray:newArray];
	return [NSMutableArray<id> arrayWithArray:newArray];
}
- (void)sort:(id)f {
	
}
- (NSMutableArray<id>*)slice:(NSInteger)pos end:(NSInteger)end {
	
	// Optional arguments
	if (!end) end = nil;
	
	return [self splice:pos len:end - pos];
}
- (id)shift {
	
	if (self.length > 0)  {
		
		id obj = [self objectAtIndex:0];
		[self removeObjectAtIndex:0];
		return obj;
	}
	return nil;
}
- (void)reverse {
	
	id reverseArray = [[self reverseObjectEnumerator] allObjects];
}
- (BOOL)remove:(id)x {
	
	BOOL containsObject = [self containsObject:x];
	if (containsObject)  {
		[self removeObject:x];
	}
	return containsObject;
}
- (void)unshift:(id)x {
	
	[self insertObject:(x!=nil?x:[NSNull null]) atIndex:0];
}
- (NSInteger)push:(id)x {
	
	[self addObject:(x!=nil?x:[NSNull null])];
	return [self count];
}
- (id)pop {
	
	if ([self count] == 0)  {
		return nil;
	}
	id theLastObject = [self lastObject];
	if ([theLastObject isKindOfClass:[NSNull class]]) theLastObject = nil;
	[self removeLastObject];
	return theLastObject;
}
- (NSString*)toString {
	
	return [NSMutableString stringWithString:[self description]];
}
- (NSString*)join:(NSString*)sep {
	
	return [NSMutableString stringWithString:[self componentsJoinedByString:sep]];
}
- (NSInteger)lastIndexOf:(id)x fromIndex:(NSInteger)fromIndex {
	
	// Optional arguments
	if (!fromIndex) fromIndex = nil;
	
	return 0;
}
- (NSInteger)indexOf:(id)x fromIndex:(NSInteger)fromIndex {
	
	// Optional arguments
	if (!fromIndex) fromIndex = nil;
	
	return 0;
}
- (void)insert:(NSInteger)pos x:(id)x {
	
	[self insertObject:(x!=nil?x:[NSNull null]) atIndex:pos];
}
- (NSMutableArray<id>*)copy {
	
	return [NSMutableArray<id> arrayWithArray:self];
}
- (NSMutableArray<id>*)concat:(NSMutableArray<id>*)a {
	
	
	NSMutableArray<id> *b = [[NSMutableArray<id> alloc] init];
	[b addObjectsFromArray:self];
	[b addObjectsFromArray:a];
	return b;
}
// Getters/setters for property: length
- (NSInteger)length { return [self count]; }
- (void) setLength:(NSInteger)val { nil; }

- (id)init {
	
	self = [super init];
	return self;
}

@end
