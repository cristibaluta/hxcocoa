//
//  PhotosPickerController
//  Wwx
//
//  Code generated by Haxe Objective-C target
//

#import "PhotosPickerController.h"

@implementation PhotosPickerController

static NSString* identif;
+ (NSString*)identif {
	if (identif == nil) identif = @"CollectionCellIdentifier";
	return identif;
}
+ (void) setIdentif:(NSString*)hx_val {
	identif = hx_val;
}
- (void)dealloc {
	
	[Log trace:@"dealloc photos controller" infos:@{@"fileName":@"PhotosPickerController.hx", @"lineNumber":@"314", @"className":@"PhotosPickerController", @"methodName":@"dealloc"}];
	[self.inverseButton removeFromSuperview];
	self.inverseButton = nil;
	[self.timeLabel removeFromSuperview];
	self.timeLabel = nil;
	[self.activityView removeFromSuperview];
	[self.activityView stopAnimating];
	self.activityView = nil;
	[self.collectionView removeFromSuperview];
	self.collectionView.delegate = nil;
	self.collectionView.dataSource = nil;
	self.collectionView = nil;
	self.cells = nil;
	self.library = nil;
}
- (BOOL)canSwipeRight {
	
	return YES;
}
- (BOOL)canSwipeLeft {
	
	return YES;
}
- (void)loadFinishedForIndexPath:(NSIndexPath*)indexPath {
	
	
	PhotosPickerController *_g = self;
	 dispatch_async( dispatch_get_main_queue(), ^() {
		
		
		CollectionCell *cell;
		cell = (CollectionCell*)[_g.collectionView cellForItemAtIndexPath:indexPath];
		
		CollectionCellData *celldata = [_g.cells hx_objectAtIndex:indexPath.item];
		cell.imageView.image = celldata.image;
	});
}
- (void)startLoadingForIndexPath:(NSIndexPath*)indexPath {
	
	
	CollectionCellData *celldata = [self.cells hx_objectAtIndex:indexPath.item];
	if (celldata.image == nil)  {
		
	}
}
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView*)collectionView {
	
	return 1;
}
- (void)collectionView:(UICollectionView*)collectionView didSelectItemAtIndexPath:(NSIndexPath*)indexPath {
	
	
	CollectionCellData *celldata = [self.cells hx_objectAtIndex:indexPath.item];
	if (celldata.selected)  {
		
		
		CollectionCell *cell;
		cell = (CollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
		[cell select:NO];
		celldata.selected = NO;
	}
	else  {
		 {
			
			
			CollectionCell *cell1;
			cell1 = (CollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
			[cell1 select:YES];
			celldata.selected = YES;
		}
	}
	[self printTime];
}
- (UICollectionViewCell*)collectionView:(UICollectionView*)collectionView_ cellForItemAtIndexPath:(NSIndexPath*)indexPath {
	
	
	CollectionCell *cell = [collectionView_ dequeueReusableCellWithReuseIdentifier:@"CollectionCellIdentifier" forIndexPath:indexPath];
	
	CollectionCellData *celldata = [self.cells hx_objectAtIndex:indexPath.item];
	cell.index = indexPath.item;
	celldata.indexPath = indexPath;
	celldata.hx_dyn_loadFinishedForIndexPath = ^(NSIndexPath *indexPath){ [self loadFinishedForIndexPath:indexPath]; };
	if (celldata.image == nil)  {
		
		cell.imageView.image = nil;
		 dispatch_async( dispatch_get_global_queue(0, 0), ^() {
			
			if (celldata.type == Local)  {
				[celldata loadImageFromLibrary:celldata.localurl];
			}
			else  {
				if (celldata.type == Facebook)  {
					[celldata loadImageFromUrl:celldata.thumbUrl];
				}
			}
		});
	}
	else  {
		cell.imageView.image = celldata.image;
	}
	[cell select:celldata.selected];
	return cell;
}
- (NSInteger)collectionView:(UICollectionView*)collectionView numberOfItemsInSection:(NSInteger)section {
	
	return self.cells.length;
}
- (void)printTime {
	
	NSInteger nr_of_active_cells = 0;
	 {
		
		NSInteger _g = 0;
		
		NSMutableArray<id> *_g1 = self.cells;
		while (_g < _g1.length)  {
			
			
			CollectionCellData *cell = [_g1 hx_objectAtIndex:_g];
			++_g;
			if (cell.selected)  {
				nr_of_active_cells++;
			}
		}
	}
	NSInteger videoDuration = 7 * nr_of_active_cells;
	NSInteger min = floorf(videoDuration / 60);
	NSInteger sec = ceilf(videoDuration - min * 60);
}
- (BOOL)isFacebook {
	
	if (self.cells.length > 0)  {
		return [self.cells hx_objectAtIndex:0].type == Facebook;
	}
	return NO;
}
- (NSMutableArray<id>*)selectedImagesUrls {
	
	
	NSMutableArray<id> *urls = [[NSMutableArray<id> alloc] init];
	 {
		
		NSInteger _g = 0;
		
		NSMutableArray<id> *_g1 = self.cells;
		while (_g < _g1.length)  {
			
			
			CollectionCellData *cell = [_g1 hx_objectAtIndex:_g];
			++_g;
			if (cell.selected)  {
				
				if (cell.type == Local)  {
					[urls push:cell.localurl];
				}
				else  {
					if (cell.type == Facebook)  {
						[urls push:cell.sourceUrl];
					}
				}
			}
		}
	}
	return urls;
}
- (void)ready {
	
}
- (void)inverseSelections {
	
	[self.inverseButton select:!self.inverseButton.selected];
	 {
		
		NSInteger _g = 0;
		
		NSMutableArray<id> *_g1 = self.cells;
		while (_g < _g1.length)  {
			
			
			CollectionCellData *cell = [_g1 hx_objectAtIndex:_g];
			++_g;
			cell.selected = !cell.selected;
		}
	}
	
	NSMutableArray<id> *visibleCells = [self.collectionView visibleCells];
	 {
		
		NSInteger _g2 = 0;
		while (_g2 < visibleCells.length)  {
			
			
			UICollectionViewCell *cell1 = [visibleCells hx_objectAtIndex:_g2];
			++_g2;
			[ ((CollectionCell*)cell1) select:[self.cells hx_objectAtIndex: ((CollectionCell*)cell1).index].selected];
		}
	}
	[self printTime];
}
- (void)loadFacebookAlbum:(NSString*)albumId {
	
	
	PhotosPickerController *_g1 = self;
	self.activityView = [[UIActivityIndicatorView alloc]  initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
	CGRect rect = self.activityView.frame;
	rect.origin.x = self.collectionView.frame.size.width / 2 - rect.size.width / 2;
	rect.origin.y = self.collectionView.frame.size.height / 2 - rect.size.height / 2;
	self.activityView.frame = rect;
	[self.collectionView addSubview:self.activityView];
	[self.activityView startAnimating];
	
	FBRequest *req = [FBRequest requestForGraphPath:[albumId stringByAppendingString:@"/photos?limit=500"]];
	[req startWithCompletionHandler:^(FBRequestConnection *connection, id result, NSError *error) {
		
		if (result != nil)  {
			
			
			NSMutableArray<id> *data = [result objectForKey:@"data"];
			 {
				
				NSInteger _g = 0;
				while (_g < data.length)  {
					
					id obj = [data hx_objectAtIndex:_g];
					++_g;
					
					CollectionCellData *cell = [[CollectionCellData alloc] init];
					cell.thumbUrl = [obj objectForKey:@"picture"];
					cell.sourceUrl = [obj objectForKey:@"source"];
					cell.selected = YES;
					cell.type = Facebook;
					cell.delegate = _g1;
					[_g1.cells push:cell];
				}
			}
			[_g1.collectionView reloadData];
			[_g1 printTime];
			[_g1.activityView stopAnimating];
			[_g1.activityView removeFromSuperview];
			_g1.activityView = nil;
		}
	}];
}
- (void)loadLocalAlbum:(ALAssetsGroup*)album {
	
	
	PhotosPickerController *_g = self;
	id groupEnumerator = ^(ALAsset *asset, NSInteger index, BOOL stop) {
		
		if (asset != nil)  {
			
			
			NSDictionary *dict = [asset valueForProperty:ALAssetPropertyURLs];
			
			NSURL *url = [dict objectForKey:@"public.jpeg"];
			if (url != nil)  {
				
				
				CollectionCellData *cell = [[CollectionCellData alloc] init];
				cell.localurl = url;
				cell.selected = YES;
				cell.type = Local;
				cell.delegate = _g;
				[_g.cells push:cell];
			}
		}
		else  {
			 dispatch_async( dispatch_get_main_queue(), ^() {
				
				[_g.collectionView reloadData];
				[_g printTime];
			});
		}
	};
	[album enumerateAssetsUsingBlock:groupEnumerator];
}
- (void)viewDidLoad {
	
	[Log trace:@"photos create" infos:@{@"fileName":@"PhotosPickerController.hx", @"lineNumber":@"38", @"className":@"PhotosPickerController", @"methodName":@"viewDidLoad"}];
	[super viewDidLoad];
	self.cells = [[NSMutableArray<id> alloc] init];
	CGRect rect = CGRectMake(0,90,self.view.frame.size.width,self.view.frame.size.height - 90 - 50);
	
	UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];
	layout.itemSize =  CGSizeMake(80, 80);
	layout.minimumInteritemSpacing = 0;
	self.collectionView = [[UICollectionView alloc] initWithFrame:rect collectionViewLayout:layout];;
	self.collectionView.delegate = self;
	self.collectionView.dataSource = self;
	self.collectionView.backgroundColor = [UIColor colorWithWhite:0.3 alpha:0.5];
	self.collectionView.autoresizingMask = ((((UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight) | UIViewAutoresizingFlexibleRightMargin) | UIViewAutoresizingFlexibleLeftMargin) | UIViewAutoresizingFlexibleBottomMargin);
	[self.collectionView registerClass:[CollectionCell class] forCellWithReuseIdentifier:@"CollectionCellIdentifier"];
	[self.view addSubview:self.collectionView];
	self.inverseButton = [[CustomButton alloc] init];
	self.inverseButton.frame = CGRectMake(10,self.view.frame.size.height - 42,195,32);
	self.inverseButton.label.text = @"INVERSE";
	self.inverseButton.image.image = [UIImage imageNamed:@"Checkmark"];
	self.inverseButton.autoresizingMask = UIViewAutoresizingFlexibleTopMargin;
	[self.inverseButton addTarget:self action:@selector(inverseSelections) forControlEvents:UIControlEventTouchUpInside];
	[self.view addSubview:self.inverseButton];
	self.timeLabel = [[UILabel alloc] init];
	self.timeLabel.frame = CGRectMake(0,75,self.view.frame.size.width,11);
	self.timeLabel.backgroundColor = [UIColor clearColor];
	self.timeLabel.textColor = [UIColor grayColor];
	self.timeLabel.font = [UIFont systemFontOfSize:11];
	self.timeLabel.text = @"";
	[self.view addSubview:self.timeLabel];
}
- (void)loadView {
	
	CGRect frame = [UIScreen mainScreen].bounds;
	self.view = [[UIView alloc] init];
	self.view.frame = frame;
}
@synthesize collectionView;
@synthesize delegate;
@synthesize activityView;
@synthesize timeLabel;
@synthesize inverseButton;
@synthesize cells;
@synthesize library;

@end
